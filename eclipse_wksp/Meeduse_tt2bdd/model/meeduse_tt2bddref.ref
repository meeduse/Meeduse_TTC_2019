REFINEMENT
	meeduse_tt2bddref
REFINES
	meeduse_tt2bddmain
INCLUDES
	meeduse_tt2bdd
DEFINITIONS
SET_PREF_SHOW_EVENTB_ANY_VALUES == TRUE;
SET_PREF_MAX_OPERATIONS == 4 ;
SET_PREF_MAXINT == 1000 ;

	selectedRows == 
	           LET cr BE cr = {cc,rr | rr:Row & cc= card(cells~[{rr}] /\ selectedCells)} IN
	             LET mx BE mx = max(dom(cr)) IN
	               cr[{mx}]
	             END
	           END;

	portRow(rr) == (cellPort~ ; cells) |> rr ;
	
	maxPort(pp,rr) == pp : InputPort & rr <: Row &
		not( # ss . (ss : InputPort & ss /= pp & ss : dom(portRow(rr))
			& card(portRow(rr)[{ss}]) > card(portRow(rr)[{pp}]))) ;

	zeroCells(pp) == (cellPort~[{pp}] /\ cells~[selectedRows]) /\ Cell_value~[{FALSE}] ;

	oneCells(pp) == (cellPort~[{pp}] /\ cells~[selectedRows]) /\ Cell_value~[{TRUE}] ;

	selectedCells == dom(Cell_selected |> {TRUE}) ;
	
	outputCells(rr) == cells~[{rr}] /\ cellPort~[OutputPort] ;
			/*{as | as : cells~[{r}] & cellPort(as) : OutputPort} ;*/
	inputCells(rr) == cells~[{rr}] /\ cellPort~[InputPort] 
			/*{as | as : cells~[{r}] & cellPort(as) : InputPort}*/

VARIABLES
	branchOne, branchZero,
	seqTree, selectedPorts, treePorts, seqLink
INVARIANT
	branchOne <: Tree &
	branchZero <: Tree &
	selectedPorts <: Port &
	treePorts : InputPort <-> Tree &
	seqTree : seq(Tree) &
	seqLink : seq(BOOL)
INITIALISATION
	branchOne, branchZero, selectedPorts := {}, {}, {} ||
	treePorts, seqTree, seqLink := {}, {}, {} ||
	setLastTree(card(Subtree))
OPERATIONS
TruthTable2BDD =
	ANY src WHERE
		src : TruthTable & src /: BDD
	THEN
		BDD_NEW(src) ;
		BddInput_NEW(InputPort) ;
		BddOutput_NEW(OutputPort) ;
		BDD_Addports(src, InputPort \/ OutputPort)
	END;

SelectPort = 
	ANY port WHERE
		InputPort /= {}
		& port : BddInput  
		& port /: cellPort[selectedCells]
		& maxPort(port, selectedRows)
		& ran(seqTree) /\ Leaf = {}
	THEN
		SELECT
			port : selectedPorts
		THEN
			seqTree := seqTree <- (treePorts(port))
		WHEN
			port /: selectedPorts
			& not(# portBis . (portBis /: cellPort[selectedCells] 
					& maxPort(portBis, selectedRows) 
					& portBis : selectedPorts))
		THEN	
			Subtree_NEW(port) ;
			BEGIN
				selectedPorts := selectedPorts \/ {port} ||			
				treePorts(port) := lastTree ||
				seqTree := seqTree <- (lastTree) 
			END ;
			IF lastTree = 1 THEN
				Tree_SetOwnerBDD(lastTree, bddPorts(port))
			END
		END ;

		SELECT zeroCells(port) /= {} THEN
			Cells_SetSelected(zeroCells(port), TRUE) ||
			branchZero := branchZero \/ treePorts[{port}] ||
			seqLink := seqLink <- (FALSE)
		WHEN oneCells(port) /= {} THEN
			Cells_SetSelected(oneCells(port), TRUE) ||
			branchOne := branchOne \/ treePorts[{port}] ||
			seqLink := seqLink <- (TRUE)
		END 
END;

setLinks =
	ANY t1, t2 WHERE 
		t1 = first(seqTree) & t2 = first(tail(seqTree))
		& ran(seqTree) /\ Leaf /= {} 
		& card(seqTree) > 1
	THEN
		IF first(seqLink) = TRUE THEN
			Subtree_SetTreeForOne(t1, t2)||
			seqLink := tail(seqLink)
		ELSE
			Subtree_SetTreeForZero(t1, t2)||
			seqLink := tail(seqLink)
		END ||
		seqTree := tail(seqTree)
	END;

Continue = 
	SELECT 
		card(seqTree) = 1 & ran(seqTree) /\ Leaf /= {}
	THEN
		seqTree := tail(seqTree) 
	END ;

Transform = 
	ANY row WHERE
		row : selectedRows
		& card(selectedRows) = 1
		& ! cc . (cc : cells~[{row}] & cellPort(cc) /: OutputPort => Cell_selected(cc) = TRUE)
	THEN
		IF card(outputCells(row)) > card(assignPort[outputCells(row)]) THEN
			ANY as WHERE as : outputCells(row) & as /: Assignment /*assignOwner[{as}] = {}*/ THEN
				Assignment_NEW(as, cellPort(as), Cell_value(as))
			END
		ELSE	
			Leaf_NEW ;
			seqTree := seqTree <- (lastTree) ;
			Assignments_SetOwner(outputCells(row), lastTree) ;
			Cells_Free(inputCells(row)\/ outputCells(row)) ;
			selectedPorts :=
			        selectedPorts - {app | app : selectedPorts & treePorts(app) :  (branchZero /\ branchOne)};
			Row_Free(row)
		END	
	END
END
